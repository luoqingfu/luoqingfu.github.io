<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lqf的随手笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/luoqingfu/luoqingfu.github.io/"/>
  <updated>2019-12-14T14:42:12.686Z</updated>
  <id>https://github.com/luoqingfu/luoqingfu.github.io/</id>
  
  <author>
    <name>lqf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>adb常用命令</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2019/12/14/adb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2019/12/14/adb常用命令/</id>
    <published>2019-12-14T14:41:48.000Z</published>
    <updated>2019-12-14T14:42:12.686Z</updated>
    
    <content type="html"><![CDATA[<p>adb logcat | grep Display    获取app入口<br>adb shell am start  -n (启动的activity的名字)   com.xueqiu.android/.view.WelcomeActivityAlias -S（启动前杀掉已有的进程）<br>adb shell pm clear com.xueqiu.android (清理指定包的缓存)<br>adb shell “uiautomator dump &amp;&amp; cat /sdcard/window_dump.xml” (捕获当前activity元素并打印出来)  </p><h4 id="Android性能统计"><a href="#Android性能统计" class="headerlink" title="Android性能统计"></a>Android性能统计</h4><ul><li>获取所有dumpsys子命令dumpsys｜grep -i DUMP</li><li>获取当前activity adb shell dumpsys activity top</li><li>获取activitiesde 记录，可以获取到appium依赖的原始activity dumpsys activity activities</li><li>获取特定包基本信息 adb shell dumpsys package com.xueqiu.android </li><li>获取系统通知 adb shell sumpsys notification</li><li>获取内存信息 adb shell dumpsys meminfo cmo.android.setting</li><li>获取cpu信息 adb shell dumpsys cupinfo</li><li>获取gpu 绘制分析 adb shell dumpsys gfxinfo com.android.settinds</li><li>获取短信 adb shell dumpsys activity broadcasts|grep senderName=</li><li></li></ul><h4 id="appium-server-安装"><a href="#appium-server-安装" class="headerlink" title="appium server 安装"></a>appium server 安装</h4><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org(使用淘宝源)" target="_blank" rel="noopener">https://registry.npm.taobao.org(使用淘宝源)</a><br> cnpm install -g appium（安装appium server）  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;adb logcat | grep Display    获取app入口&lt;br&gt;adb shell am start  -n (启动的activity的名字)   com.xueqiu.android/.view.WelcomeActivityAlias -S（启动前杀掉已
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自动化测试&amp;持续集成</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2019/12/12/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2019/12/12/自动化测试-持续集成/</id>
    <published>2019-12-12T02:31:09.000Z</published>
    <updated>2019-12-14T11:15:11.021Z</updated>
    
    <content type="html"><![CDATA[<p>1.问题思考<br>A.什么是自动化？自动化分为哪几个？<br>B.自动化测试是不是可信？<br>C.自动化并没有解放我们？</p><p>A.1:<br>“手工测试”：<br>如图可以，手工测试就是手动地去遍历被测软件的所有功能。<br><img src="https://i.ibb.co/dLqjQ5n/hand.png" alt=""></p><p>自动化测试：<br>自动化测试就是让被测试的软件自己运行起来，执行软件的功能。<br><img src="https://i.ibb.co/4MHM9Cb/auto.png" alt=""></p><a id="more"></a><p>实际上我们所说的自动化测试就是通过编写一点的脚本，让被测程序按照编写好的路径遍历功能<br><img src="https://i.ibb.co/zPsDfcr/image.png" alt=""><br>事实上，自动化测试覆盖了从 UI （功能测试）到接口测试以及单元测试的整个过程，要想很好的掌握自动化测试，那么的确需要以下三种领域的经验积累：<br>编程语言，面向对象编程优先，因为大量的开源技术方案，都是基于面向对象的编程方式<br>第三方测试工具和测试框架，这些主要通过官网的文档学习<br>测试的理念与设计，工具和语言，只是测试的手段，如何准备测试数据，如何设置测试的检查点与测试步骤，这些决定了测试的成败</p><p>1，UI自动化（以selenium2为例）</p><ul><li>多浏览器支持</li><li>多语言支持</li><li>多操作系统支持</li><li>开源免费<br><img src="https://i.ibb.co/j3WwMcp/image.png" alt=""></li></ul><p>1，脚本运行之后打开指定的浏览起，接收测试脚本的命令<br>2，webdriver操作浏览器（通过浏览器的原生组件，转化webserver命令为浏览器调用）<br>3，用户操作web application过程</p><p>手动功能测试：<br>1.打开浏览器，输入网址<br>2.找到账号输入框输入账号<br>3.找到密码输入框输入密码<br>4.点击登录按钮<br>5.判断是否登录成功<br>自动化测试<br>最小测试case<br><img src="https://i.ibb.co/PgSgQS5/testcase.png" alt=""></p><p>以及修改后只关心流程的代码<br><img src="https://i.ibb.co/qC5k0fr/image.png" alt=""></p><p>测试报告<br><img src="https://i.ibb.co/MgxZ4NB/image.png" alt=""><br>接口测试：<br>接口简介：<br>用户登录英荔播客平台<br>接口地址：<br><a href="https://yingliboke.cn/api/account/login" target="_blank" rel="noopener">https://yingliboke.cn/api/account/login</a><br>请求类型：<br>post<br>请求参数  </p><table><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>描述</th><th>默认值</th><th>参考值  </th></tr></thead><tbody><tr><td>device_type</td><td>string</td><td>是</td><td>设备类型</td><td>空</td><td>web  </td></tr><tr><td>token</td><td>string</td><td>是</td><td>token值</td><td>空</td><td>空  </td></tr><tr><td>company_id</td><td>string</td><td>是</td><td>组织id</td><td>空</td><td>空  </td></tr><tr><td>target</td><td>string</td><td>是</td><td>账号</td><td>无</td><td>13226349780  </td></tr><tr><td>password</td><td>string</td><td>是</td><td>密码</td><td>无</td><td>123456  </td></tr><tr><td>target_type</td><td>string</td><td>是</td><td>账号类型</td><td>无</td><td>1（手机号码）</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"code"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"msg"</span>: <span class="string">"登录成功!"</span>,</span><br><span class="line"><span class="string">"data"</span>: &#123;</span><br><span class="line"><span class="string">"token"</span>: <span class="string">"4baf601b78ebbc99a29bd97d604de65c879afc7e091b7ea209e3eb5f4e1aabee"</span>,</span><br><span class="line"><span class="string">"user"</span>: &#123;</span><br><span class="line"><span class="string">"id"</span>: <span class="number">2215</span>,</span><br><span class="line"><span class="string">"mobile"</span>: <span class="string">"+86-13226349780"</span>,</span><br><span class="line"><span class="string">"user_email"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"user_type"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">"user_login"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"user_name"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"user_nickname"</span>: <span class="string">"+8****2263"</span>,</span><br><span class="line"><span class="string">"qq_openid"</span>: null,</span><br><span class="line"><span class="string">"weibo_openid"</span>: null,</span><br><span class="line"><span class="string">"weixin_unionid"</span>: null,</span><br><span class="line"><span class="string">"sex"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"birthday"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"score"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"balance"</span>: <span class="string">"0.00"</span>,</span><br><span class="line"><span class="string">"user_status"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"avatar"</span>: <span class="string">"https:\/\/elitelive.oss-cn-shenzhen.aliyuncs.com\/default\/avatar\/1.png"</span>,</span><br><span class="line"><span class="string">"signature"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"last_login_ip"</span>: <span class="string">"219.137.186.204"</span>,</span><br><span class="line"><span class="string">"unique"</span>: <span class="string">"74f6f5718db0cd3d6f9fce8c8e8981f9"</span>,</span><br><span class="line"><span class="string">"im_token"</span>: <span class="string">"29266c5c935fdf4866a71458874cbe89"</span>,</span><br><span class="line"><span class="string">"more"</span>: [],</span><br><span class="line"><span class="string">"from_device_type"</span>: <span class="string">"web"</span>,</span><br><span class="line"><span class="string">"last_login_time"</span>: <span class="number">1557851794</span>,</span><br><span class="line"><span class="string">"create_time"</span>: <span class="number">1556443720</span>,</span><br><span class="line"><span class="string">"update_time"</span>: <span class="number">1557851794</span>,</span><br><span class="line"><span class="string">"delete_time"</span>: null,</span><br><span class="line"><span class="string">"wx_pay_openid"</span>: null,</span><br><span class="line"><span class="string">"has_company"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"company_id"</span>: <span class="number">148</span>,</span><br><span class="line"><span class="string">"company_name"</span>: <span class="string">"lqf"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"runtime"</span>: <span class="number">0.13</span>,</span><br><span class="line"><span class="string">"time"</span>: <span class="number">1557851968</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口测试：<br><img src="https://i.ibb.co/yP2SkWD/image.png" alt=""></p><p>B：提高自动化的可信度<br>1，失败重试机制<br>2，自动化场景用例设计依据测试用例（完善场景)<br>3，及时更新自动化用例<br>4，更好的协作（自动化与手工相互补充，减少重复劳动）<br>5，每天定时构建。  </p><p>C.自动化并没有解放我们？<br>自动化与ci结合。<br>场景：<br>这里没改过啊，怎么出错了？不知道是哪一次提交影响到了  </p><p>什么是持续集成？<br>持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起  </p><p>价值？<br>(1) 减小风险（快速发现错误）；<br>(2) 减少手动过程；<br>(3) 生成构建结果；  </p><p>成本？<br>持续集成的成本在于对持续集成代码的维护成本和集成的时间成本。因为随着项目进行，软硬件环境会越来越复杂，成品代码也会不断膨胀。此时，需要团队而修改或增加原有的测试代码，以适应这些变化，同时，每次集成所需时间也会变长，这就是持续集成的成本。  </p><p>持续集成应该自动化什么呢？<br>1.自动产生可部署的成品（android包，或者iOS包，或者docker镜像）<br>2.自动将成品部署到环境中去<br>3.自动的回归测试<br>4.自动生成报告<br><img src="https://i.ibb.co/X4D2hMr/ci.png" alt=""></p><p>选择一个ci平台？<br>Jenkins。<br><img src="https://i.ibb.co/6YjYHMQ/jenkins.png" alt=""></p><p>Jenkins是一个独立的开源自动化服务器，可用于自动执行与构建，测试，交付或部署软件相关的各种任务。<br>打包：<br><img src="https://i.ibb.co/92NJ7Dd/image.png" alt=""></p><p>场景：昨天这个功能还是好的，今天怎么就出错了？（也可能是不知道什么就出错了）<br>定时测试：<br><img src="https://i.ibb.co/xmXyt7r/image.png" alt=""></p><p>场景：需要手动更新平台代码。需要在电脑前等待  </p><p>部署-测试-结果  </p><p><img src="https://i.ibb.co/5sfhYRv/image.png" alt=""></p><p><img src="https://i.ibb.co/MgxZ4NB/image.png" alt=""><br><img src="https://i.ibb.co/8NWsfJZ/1.png" alt=""></p><p>以及消息通知：</p><p><img src="https://i.ibb.co/tJN71BS/image.png" alt=""></p><p>未完：持续交付</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.问题思考&lt;br&gt;A.什么是自动化？自动化分为哪几个？&lt;br&gt;B.自动化测试是不是可信？&lt;br&gt;C.自动化并没有解放我们？&lt;/p&gt;
&lt;p&gt;A.1:&lt;br&gt;“手工测试”：&lt;br&gt;如图可以，手工测试就是手动地去遍历被测软件的所有功能。&lt;br&gt;&lt;img src=&quot;https://i.ibb.co/dLqjQ5n/hand.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;自动化测试：&lt;br&gt;自动化测试就是让被测试的软件自己运行起来，执行软件的功能。&lt;br&gt;&lt;img src=&quot;https://i.ibb.co/4MHM9Cb/auto.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>circle初探</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2019/03/12/circle%E5%88%9D%E6%8E%A2/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2019/03/12/circle初探/</id>
    <published>2019-03-12T08:23:26.000Z</published>
    <updated>2019-03-12T10:17:32.626Z</updated>
    
    <content type="html"><![CDATA[<h4 id="github"><a href="#github" class="headerlink" title="github"></a>github</h4><p>注册并添加到circleci中会添加一个钩子，用于在有pr是进行测试，也会有邮件提醒，取决于你的设置</p><h4 id="添加-circleci-config-yml文件"><a href="#添加-circleci-config-yml文件" class="headerlink" title="添加.circleci / config.yml文件"></a>添加.circleci / config.yml文件</h4><p>在创建.circleci/config.yml文件并将其提交到GitHub储库后，CircleCI会立即检查您的代码并运行配置好的测试代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    docker:</span><br><span class="line">      - image: circleci/ruby:<span class="number">2.4</span><span class="number">.1</span>-jessie</span><br><span class="line">    steps:</span><br><span class="line">      - run: |</span><br><span class="line">          bundle install</span><br><span class="line">          bundle <span class="keyword">exec</span> rake db:schema:load</span><br><span class="line">          bundle <span class="keyword">exec</span> rspec spec</span><br><span class="line">          bundle <span class="keyword">exec</span> cucumber</span><br></pre></td></tr></table></figure></p><p>CircleCI每次都在一个干净的容器上运行测试，可以在dashboard中查看，或者邮件查看结果<br><img src="https://circleci.com/docs/assets/img/docs/status_badge.png" alt="image"></p><p>集成状态也会出现在拉取请求屏幕上，以显示所有测试都已通过：<br><img src="https://circleci.com/docs/assets/img/docs/status_check.png" alt="image">  </p><h4 id="部署密钥和用户密钥"><a href="#部署密钥和用户密钥" class="headerlink" title="部署密钥和用户密钥"></a>部署密钥和用户密钥</h4><p>如果使用GitHub作为VCS，则GitHub具有公钥，而CircleCI存储私钥。部署密钥使CircleCI可以访问单个存储库。为防止CircleCI推送到您的存储库，此部署密钥是只读的。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>在github上创建一个项目 ：<a href="https://github.com/username/test-repo">repo</a></p><p>1，<a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">生成密钥</a>： 按照提示生成密钥  </p><p>会在/Users/yourusername/.ssh下生成一个密钥<br>2，转到<a href="https://github.com/you/test-repo/settings/keys，然后单击“添加部署密钥”。在“标题”字段中输入标题，然后复制并粘贴在步骤1中创建的密钥。选中“允许写访问”，然后单击“添加密钥”。(直接按配置后即可)">https://github.com/you/test-repo/settings/keys，然后单击“添加部署密钥”。在“标题”字段中输入标题，然后复制并粘贴在步骤1中创建的密钥。选中“允许写访问”，然后单击“添加密钥”。(直接按配置后即可)</a></p><a id="more"></a><h4 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h4><p>添加.circleci/config.yml。 yml添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="number">2.1</span></span><br><span class="line"></span><br><span class="line">orbs:</span><br><span class="line">    hello: circleci/hello-build@<span class="number">0.0</span><span class="number">.7</span> <span class="comment"># uses the circleci/buildpack-deps Docker image</span></span><br><span class="line"></span><br><span class="line">workflows:</span><br><span class="line">    <span class="string">"Hello Workflow"</span>:</span><br><span class="line">        jobs:</span><br><span class="line">          - hello/hello-build</span><br></pre></td></tr></table></figure><p>commit and push 即可触发构建</p><h4 id="在构建时输出hello-world"><a href="#在构建时输出hello-world" class="headerlink" title="在构建时输出hello world"></a>在构建时输出hello world</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="number">2</span></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    docker: <span class="comment"># use the docker executor type; machine and macos executors are also supported</span></span><br><span class="line">      - image: circleci/node:<span class="number">4.8</span><span class="number">.2</span> <span class="comment"># the primary container, where your job's commands are run</span></span><br><span class="line">    steps:</span><br><span class="line">      - checkout <span class="comment"># check out the code in the project directory</span></span><br><span class="line">      - run: echo <span class="string">"hello world"</span> <span class="comment"># run the `echo` command</span></span><br></pre></td></tr></table></figure><p>每次job，ci都会启动一个容器来运行该job</p><p>version: 你要使用的ci版本<br>job:你要执行的 job 清单，集合中的键为 job 的名称，值是具体执行 job 的内容，如果你使用工作流(workflows)，则 job 的名称在配置文件中必须唯一，如果你不使用 工作流(workflows)，则必须包含名称为build的 job 来作为用户提交代码时的默认 job。<br>docker :是用来指定 CircleCI 当前 job 使用 docker, 其值image是指 docker 所使用的镜像，必要时你可以同时指定多个镜像，比如你的项目需要依赖 mysql 或者 redis。 第一个列出的容器为主容器，steps 都会在主容器中进行。<br>steps:当前 job 要运行的 命令 (command) 列表<br>working_directory: 属性是用来定义steps 在哪个目录运行</p><h4 id="构建、测试"><a href="#构建、测试" class="headerlink" title="构建、测试"></a>构建、测试</h4><ol><li><p>检出代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- checkout</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- run:</span><br><span class="line">    name: Install local dependencies</span><br><span class="line">    command: pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>缓存依赖（不懂）先记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- save_cache:</span><br><span class="line">    paths:</span><br><span class="line">    - ./vendor</span><br><span class="line">    key: v1-dependencies-&#123;&#123; checksum <span class="string">"composer.json"</span> &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- run:</span><br><span class="line">    name: Testing</span><br><span class="line">    command: python3 xxxx.py</span><br></pre></td></tr></table></figure></li></ol><p>运行测试，如果任何测试不通过，本次构建将失败</p><ol start="5"><li>打包 docker 镜像<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- run:</span><br><span class="line">    name: Build image</span><br><span class="line">    command: |</span><br><span class="line">        docker build -t $FULL_IMAGE_NAME .</span><br><span class="line">        mkdir docker-image</span><br><span class="line">        docker save -o docker-image/image.tar $FULL_IMAGE_NAME</span><br></pre></td></tr></table></figure></li></ol><p>打包 docker 镜像并命名为 $FULL_IMAGE_NAME，并将镜像 保存成 tar 归档文件  </p><ol start="6"><li>运行并简单测试镜像<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- run:</span><br><span class="line">    name: Test image</span><br><span class="line">    command: |</span><br><span class="line">      docker run -d -p <span class="number">8080</span>:<span class="number">80</span> --name built-image $FULL_IMAGE_NAME</span><br><span class="line">      sleep <span class="number">10</span></span><br><span class="line">      docker run --network container:built-image byrnedo/alpine-curl -I --retry <span class="number">10</span> --retry-connrefused http://localhost</span><br></pre></td></tr></table></figure></li></ol><p>运行刚才打包好的镜像，然后使用 curl 对打包好的镜像进行简单测试</p><ol start="7"><li>保存镜像  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- persist_to_workspace:</span><br><span class="line">    root: .</span><br><span class="line">    paths:</span><br><span class="line">    - docker-image</span><br></pre></td></tr></table></figure></li></ol><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>docker 的推送以及部署，涉及docker，以及部署命令，现在为大概了解ci是怎么样的一个过程，如果有可能，将会对自动化的持续集成有重大意义。待补充开发知识后再做实践</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;github&quot;&gt;&lt;a href=&quot;#github&quot; class=&quot;headerlink&quot; title=&quot;github&quot;&gt;&lt;/a&gt;github&lt;/h4&gt;&lt;p&gt;注册并添加到circleci中会添加一个钩子，用于在有pr是进行测试，也会有邮件提醒，取决于你的设置&lt;/p&gt;
&lt;h4 id=&quot;添加-circleci-config-yml文件&quot;&gt;&lt;a href=&quot;#添加-circleci-config-yml文件&quot; class=&quot;headerlink&quot; title=&quot;添加.circleci / config.yml文件&quot;&gt;&lt;/a&gt;添加.circleci / config.yml文件&lt;/h4&gt;&lt;p&gt;在创建.circleci/config.yml文件并将其提交到GitHub储库后，CircleCI会立即检查您的代码并运行配置好的测试代码&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jobs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    docker:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - image: circleci/ruby:&lt;span class=&quot;number&quot;&gt;2.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;-jessie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    steps:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - run: |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          bundle install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          bundle &lt;span class=&quot;keyword&quot;&gt;exec&lt;/span&gt; rake db:schema:load&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          bundle &lt;span class=&quot;keyword&quot;&gt;exec&lt;/span&gt; rspec spec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          bundle &lt;span class=&quot;keyword&quot;&gt;exec&lt;/span&gt; cucumber&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;CircleCI每次都在一个干净的容器上运行测试，可以在dashboard中查看，或者邮件查看结果&lt;br&gt;&lt;img src=&quot;https://circleci.com/docs/assets/img/docs/status_badge.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;集成状态也会出现在拉取请求屏幕上，以显示所有测试都已通过：&lt;br&gt;&lt;img src=&quot;https://circleci.com/docs/assets/img/docs/status_check.png&quot; alt=&quot;image&quot;&gt;  &lt;/p&gt;
&lt;h4 id=&quot;部署密钥和用户密钥&quot;&gt;&lt;a href=&quot;#部署密钥和用户密钥&quot; class=&quot;headerlink&quot; title=&quot;部署密钥和用户密钥&quot;&gt;&lt;/a&gt;部署密钥和用户密钥&lt;/h4&gt;&lt;p&gt;如果使用GitHub作为VCS，则GitHub具有公钥，而CircleCI存储私钥。部署密钥使CircleCI可以访问单个存储库。为防止CircleCI推送到您的存储库，此部署密钥是只读的。&lt;/p&gt;
&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;p&gt;在github上创建一个项目 ：&lt;a href=&quot;https://github.com/username/test-repo&quot;&gt;repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1，&lt;a href=&quot;https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;生成密钥&lt;/a&gt;： 按照提示生成密钥  &lt;/p&gt;
&lt;p&gt;会在/Users/yourusername/.ssh下生成一个密钥&lt;br&gt;2，转到&lt;a href=&quot;https://github.com/you/test-repo/settings/keys，然后单击“添加部署密钥”。在“标题”字段中输入标题，然后复制并粘贴在步骤1中创建的密钥。选中“允许写访问”，然后单击“添加密钥”。(直接按配置后即可)&quot;&gt;https://github.com/you/test-repo/settings/keys，然后单击“添加部署密钥”。在“标题”字段中输入标题，然后复制并粘贴在步骤1中创建的密钥。选中“允许写访问”，然后单击“添加密钥”。(直接按配置后即可)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>js随写</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2019/02/25/js%E9%9A%8F%E5%86%99/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2019/02/25/js随写/</id>
    <published>2019-02-25T03:34:22.000Z</published>
    <updated>2019-02-25T03:35:04.400Z</updated>
    
    <content type="html"><![CDATA[<p>赋值语句：<br>var x = 1;<br>使用；表示语句结束一下为两个语句：<br>var x = 1; var y = 2;<br>语句块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">2</span> &gt; <span class="number">1</span>)&#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    y = <span class="number">2</span>;</span><br><span class="line">    z = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h4><p>Number<br>JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>; <span class="comment">// 整数123</span></span><br><span class="line"><span class="number">0.456</span>; <span class="comment">// 浮点数0.456</span></span><br><span class="line"><span class="number">1.2345e3</span>; <span class="comment">// 科学计数法表示1.2345x1000，等同于1234.5</span></span><br><span class="line"><span class="number">-99</span>; <span class="comment">// 负数</span></span><br><span class="line"><span class="literal">NaN</span>; <span class="comment">// NaN表示Not a Number，当无法计算结果时用NaN表示</span></span><br><span class="line"><span class="literal">Infinity</span>; <span class="comment">// Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</span></span><br></pre></td></tr></table></figure></p><p>Number可以直接做四则运算，规则和数学一致：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span>; <span class="comment">// 3</span></span><br><span class="line">(<span class="number">1</span> + <span class="number">2</span>) * <span class="number">5</span> / <span class="number">2</span>; <span class="comment">// 7.5</span></span><br><span class="line"><span class="number">2</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="number">0</span> / <span class="number">0</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="number">10</span> % <span class="number">3</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="number">10.5</span> % <span class="number">3</span>; <span class="comment">// 1.5</span></span><br></pre></td></tr></table></figure></p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。<br><a id="more"></a></p><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>布尔值和布尔代数的表示完全一致，一个布尔值只有true、false两种值，要么是true，要么是false，可以直接用true、false表示布尔值，也可以通过布尔运算计算出来：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span>; <span class="comment">// 这是一个true值</span></span><br><span class="line"><span class="literal">false</span>; <span class="comment">// 这是一个false值</span></span><br><span class="line"><span class="number">2</span> &gt; <span class="number">1</span>; <span class="comment">// 这是一个true值</span></span><br><span class="line"><span class="number">2</span> &gt;= <span class="number">3</span>; <span class="comment">// 这是一个false值</span></span><br></pre></td></tr></table></figure></p><p>&amp;&amp;运算是与运算，只有所有都为true，&amp;&amp;运算结果才是true：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">true</span>; <span class="comment">// 这个&amp;&amp;语句计算结果为true</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">false</span>; <span class="comment">// 这个&amp;&amp;语句计算结果为false</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>; <span class="comment">// 这个&amp;&amp;语句计算结果为false</span></span><br></pre></td></tr></table></figure></p><p>||运算是或运算，只要其中有一个为true，||运算结果就是true：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> || <span class="literal">false</span>; <span class="comment">// 这个||语句计算结果为false</span></span><br><span class="line"><span class="literal">true</span> || <span class="literal">false</span>; <span class="comment">// 这个||语句计算结果为true</span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">true</span> || <span class="literal">false</span>; <span class="comment">// 这个||语句计算结果为true</span></span><br></pre></td></tr></table></figure></p><p>!运算是非运算，它是一个单目运算符，把true变成false，false变成true：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">! <span class="literal">true</span>; <span class="comment">// 结果为false</span></span><br><span class="line">! <span class="literal">false</span>; <span class="comment">// 结果为true</span></span><br><span class="line">! (<span class="number">2</span> &gt; <span class="number">5</span>); <span class="comment">// 结果为true</span></span><br></pre></td></tr></table></figure></p><p>布尔值经常用在条件判断中，比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    alert(<span class="string">'adult'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">'teenager'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比较运算符<br>当我们对Number做比较时，可以通过比较运算符得到一个布尔值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> &gt; <span class="number">5</span>; <span class="comment">// false</span></span><br><span class="line"><span class="number">5</span> &gt;= <span class="number">2</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">7</span> == <span class="number">7</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>实际上，JavaScript允许对任意数据类型做比较：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> == <span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> === <span class="number">0</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>要特别注意相等运算符==。JavaScript在设计时，有两种比较运算符：</p><p>第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p><p>第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。</p><p>由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。</p><p>数组<br>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">'Hello'</span>, <span class="literal">null</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure></p><p>上述数组包含6个元素。数组用[]表示，元素之间用,分隔。</p><p>另一种创建数组的方法是通过Array()函数实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 创建了数组[1, 2, 3]</span></span><br></pre></td></tr></table></figure></p><p>然而，出于代码的可读性考虑，强烈建议直接使用[]。</p><p>数组的元素可以通过索引来访问。请注意，索引的起始值为0：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">'Hello'</span>, <span class="literal">null</span>, <span class="literal">true</span>];</span><br><span class="line">arr[<span class="number">0</span>]; <span class="comment">// 返回索引为0的元素，即1</span></span><br><span class="line">arr[<span class="number">5</span>]; <span class="comment">// 返回索引为5的元素，即true</span></span><br><span class="line">arr[<span class="number">6</span>]; <span class="comment">// 索引超出了范围，返回undefined</span></span><br></pre></td></tr></table></figure></p><p>对象<br>JavaScript的对象是一组由键-值组成的无序集合，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Bob'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    tags: [<span class="string">'js'</span>, <span class="string">'web'</span>, <span class="string">'mobile'</span>],</span><br><span class="line">    city: <span class="string">'Beijing'</span>,</span><br><span class="line">    hasCar: <span class="literal">true</span>,</span><br><span class="line">    zipcode: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。上述person对象一共定义了6个键值对，其中每个键又称为对象的属性，例如，person的name属性为’Bob’，zipcode属性为null。</p><p>要获取一个对象的属性，我们用对象变量.属性名的方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.name; <span class="comment">// 'Bob'</span></span><br><span class="line">person.zipcode; <span class="comment">// null</span></span><br></pre></td></tr></table></figure></p><p>如果有很多变量需要连接，用+号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">`你好, <span class="subst">$&#123;name&#125;</span>, 你今年<span class="subst">$&#123;age&#125;</span>岁了!`</span>;</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure></p><p>JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。</p><p>要取得Array的长度，直接访问length属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">'Hello'</span>, <span class="literal">null</span>, <span class="literal">true</span>];</span><br><span class="line">arr.length; <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></p><p>请注意，直接给Array的length赋一个新的值会导致Array大小的变化：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.length; <span class="comment">// 3</span></span><br><span class="line">arr.length = <span class="number">6</span>;</span><br><span class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, undefined]</span></span><br><span class="line">arr.length = <span class="number">2</span>;</span><br><span class="line">arr; <span class="comment">// arr变为[1, 2]</span></span><br></pre></td></tr></table></figure></p><p>Array可以通过索引把对应的元素修改为新的值，因此，对Array的索引进行赋值会直接修改这个Array：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">arr; <span class="comment">// arr现在变为['A', 99, 'C']</span></span><br></pre></td></tr></table></figure></p><p>请注意，如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">'x'</span>;</span><br><span class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, 'x']</span></span><br></pre></td></tr></table></figure></p><p>大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。然而，JavaScript的Array却不会有任何错误。在编写代码时，不建议直接修改Array的大小，访问索引时要确保索引不会越界。  </p><p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。</p><p>JavaScript的对象用于描述现实世界中的某个对象。例如，为了描述“小明”这个淘气的小朋友，我们可以用若干键值对来描述他：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    birth: <span class="number">1990</span>,</span><br><span class="line">    school: <span class="string">'No.1 Middle School'</span>,</span><br><span class="line">    height: <span class="number">1.70</span>,</span><br><span class="line">    weight: <span class="number">65</span>,</span><br><span class="line">    score: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>JavaScript用一个{…}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。注意，最后一个键值对不需要在末尾加,，如果加了，有的浏览器（如低版本的IE）将报错。</p><p>上述对象申明了一个name属性，值是’小明’，birth属性，值是1990，以及其他一些属性。最后，把这个对象赋值给变量xiaoming后，就可以通过变量xiaoming来获取小明的属性了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xiaoming.name; <span class="comment">// '小明'</span></span><br><span class="line">xiaoming.birth; <span class="comment">// 1990</span></span><br></pre></td></tr></table></figure></p><p>访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用’’括起来：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaohong = &#123;</span><br><span class="line">    name: <span class="string">'小红'</span>,</span><br><span class="line">    <span class="string">'middle-school'</span>: <span class="string">'No.1 Middle School'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>xiaohong的属性名middle-school不是一个有效的变量，就需要用’’括起来。访问这个属性也无法使用.操作符，必须用[‘xxx’]来访问：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xiaohong[<span class="string">'middle-school'</span>]; <span class="comment">// 'No.1 Middle School'</span></span><br><span class="line">xiaohong[<span class="string">'name'</span>]; <span class="comment">// '小红'</span></span><br><span class="line">xiaohong.name; <span class="comment">// '小红'</span></span><br></pre></td></tr></table></figure></p><p>也可以用xiaohong[‘name’]来访问xiaohong的name属性，不过xiaohong.name的写法更简洁。我们在编写JavaScript代码的时候，属性名尽量使用标准的变量名，这样就可以直接通过object.prop的形式访问一个属性了。  </p><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。</p><p>为什么叫Arrow Function？因为它的定义用的就是一个箭头：</p><p>x =&gt; x * x<br>上面的箭头函数相当于：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;赋值语句：&lt;br&gt;var x = 1;&lt;br&gt;使用；表示语句结束一下为两个语句：&lt;br&gt;var x = 1; var y = 2;&lt;br&gt;语句块：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;数据类型和变量&quot;&gt;&lt;a href=&quot;#数据类型和变量&quot; class=&quot;headerlink&quot; title=&quot;数据类型和变量&quot;&gt;&lt;/a&gt;数据类型和变量&lt;/h4&gt;&lt;p&gt;Number&lt;br&gt;JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 整数123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0.456&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 浮点数0.456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1.2345e3&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 科学计数法表示1.2345x1000，等同于1234.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;-99&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 负数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// NaN表示Not a Number，当无法计算结果时用NaN表示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Number可以直接做四则运算，规则和数学一致：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 7.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// Infinity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;10.5&lt;/span&gt; % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 1.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h4&gt;&lt;p&gt;字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Django学习01</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2018/12/09/Django%E5%AD%A6%E4%B9%A001/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2018/12/09/Django学习01/</id>
    <published>2018-12-09T09:02:28.000Z</published>
    <updated>2018-12-10T08:30:58.041Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject 项目名</span><br><span class="line">```  </span><br><span class="line">settings.py 设置文件  </span><br><span class="line">url.py 路由控制  </span><br><span class="line">wsgi.py 服务器使用wsgi部署文件  </span><br><span class="line">manage.py Django项目管理  </span><br><span class="line"></span><br><span class="line"><span class="comment">#### 启动项目  </span></span><br><span class="line">```python</span><br><span class="line">python manage.py runserver <span class="number">8080</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv [名称]</span><br><span class="line">rmvirtualenv [名称]</span><br><span class="line">workon [名称]</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><h4 id="查看Django版本"><a href="#查看Django版本" class="headerlink" title="查看Django版本"></a>查看Django版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -m django --version</span><br><span class="line">python manage.py makemigrations</span><br><span class="line">                 migrate</span><br></pre></td></tr></table></figure><h4 id="把需要的包输出到一个文件中-amp-一键部署"><a href="#把需要的包输出到一个文件中-amp-一键部署" class="headerlink" title="把需要的包输出到一个文件中&amp;一键部署"></a>把需要的包输出到一个文件中&amp;一键部署</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt  </span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h4 id="常用的模版标签和过滤器"><a href="#常用的模版标签和过滤器" class="headerlink" title="常用的模版标签和过滤器"></a>常用的模版标签和过滤器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;字段&#125;&#125;  </span><br><span class="line">&#123;% url <span class="string">'别名'</span> 条件 %&#125;  </span><br><span class="line">|过滤（|date:<span class="string">'Y-m-d H:m:s'</span>）  </span><br><span class="line">|truncatechars:<span class="number">30</span>  </span><br><span class="line">&#123;<span class="comment">#注释#&#125;  </span></span><br><span class="line">&#123;%<span class="keyword">for</span>%&#125;  </span><br><span class="line">&#123;%denfor%&#125;  </span><br><span class="line">|length   </span><br><span class="line">&#123;%block%&#125;&#123;%endblock%&#125;  </span><br><span class="line">&#123;%extends <span class="string">'模版文件'</span>%&#125;  </span><br><span class="line">加指定的模版目录需要添加 TEMPLATES <span class="string">'DIRS'</span>:</span><br></pre></td></tr></table></figure><p><a href="https://docs.djangoproject.com/zh-hans/2.1/ref/templates/builtins/" target="_blank" rel="noopener">https://docs.djangoproject.com/zh-hans/2.1/ref/templates/builtins/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;创建一个项目&quot;&gt;&lt;a href=&quot;#创建一个项目&quot; class=&quot;headerlink&quot; title=&quot;创建一个项目&quot;&gt;&lt;/a&gt;创建一个项目&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;django-admin startproject 项目名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;settings.py 设置文件  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url.py 路由控制  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wsgi.py 服务器使用wsgi部署文件  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;manage.py Django项目管理  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#### 启动项目  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python manage.py runserver &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>jenkins+pytest+allure环境搭建</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2018/11/23/jenkins-pytest-allure%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2018/11/23/jenkins-pytest-allure环境搭建/</id>
    <published>2018-11-23T08:54:41.000Z</published>
    <updated>2018-12-07T01:39:04.329Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ubuntu安装jenkins"><a href="#ubuntu安装jenkins" class="headerlink" title="ubuntu安装jenkins"></a>ubuntu安装jenkins</h4><p>参考：<a href="https://juejin.im/post/5b6329c2e51d4519044ab85f" target="_blank" rel="noopener">https://juejin.im/post/5b6329c2e51d4519044ab85f</a>  </p><h4 id="ubuntu装python3"><a href="#ubuntu装python3" class="headerlink" title="ubuntu装python3"></a>ubuntu装python3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3<span class="number">.6</span></span><br></pre></td></tr></table></figure><p>修改默认python版本：<br>打开该用户的 ~/.bashrc文件，添加新的别名信息来修改默认使用的 Python 版本。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias python=<span class="string">'/usr/bin/python3.6'</span>  </span><br><span class="line">. ~/.bashrc  <span class="comment">#生效</span></span><br></pre></td></tr></table></figure><h4 id="安装pytest-amp-allure"><a href="#安装pytest-amp-allure" class="headerlink" title="安装pytest&amp;allure"></a>安装pytest&amp;allure</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip3 install pytest</span><br><span class="line">pip3 install pytest-allure-adaptor</span><br><span class="line">npm install -g allure-commandline --save-dev</span><br></pre></td></tr></table></figure><h4 id="配置PYTHONPATH环境变量"><a href="#配置PYTHONPATH环境变量" class="headerlink" title="配置PYTHONPATH环境变量"></a>配置PYTHONPATH环境变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure><a id="more"></a><p>在文件的最后一行输入添加以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/Python3<span class="number">.6</span>/bin</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">或者使用：</span><br><span class="line">```python</span><br><span class="line">export PATH=$PATH:/usr/local/Python3<span class="number">.6</span>/bin</span><br></pre></td></tr></table></figure></p><h4 id="将环境变量配置到jenkins"><a href="#将环境变量配置到jenkins" class="headerlink" title="将环境变量配置到jenkins"></a>将环境变量配置到jenkins</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>系统设置-&gt;环境变量</p><h4 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd $&#123;ALLURE_HOME&#125;;pytest -s -q --alluredir $&#123;ALLURE_HOME&#125;/allure-results;allure generate /allure-results -o allure-results/html --clean</span><br></pre></td></tr></table></figure><h4 id="小坑"><a href="#小坑" class="headerlink" title="小坑"></a>小坑</h4><p>allure要使用npm安装，不然找不到<br>pytest最新版不能用，使用版本为3.7.3<br>jenkins报告不能显示（还没解决）</p><h4 id="github触发"><a href="#github触发" class="headerlink" title="github触发"></a>github触发</h4><p><a href="https://blog.csdn.net/boling_cavalry/article/details/78943061" target="_blank" rel="noopener">https://blog.csdn.net/boling_cavalry/article/details/78943061</a><br><a href="https://segmentfault.com/a/1190000004640060" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004640060</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ubuntu安装jenkins&quot;&gt;&lt;a href=&quot;#ubuntu安装jenkins&quot; class=&quot;headerlink&quot; title=&quot;ubuntu安装jenkins&quot;&gt;&lt;/a&gt;ubuntu安装jenkins&lt;/h4&gt;&lt;p&gt;参考：&lt;a href=&quot;https://juejin.im/post/5b6329c2e51d4519044ab85f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5b6329c2e51d4519044ab85f&lt;/a&gt;  &lt;/p&gt;
&lt;h4 id=&quot;ubuntu装python3&quot;&gt;&lt;a href=&quot;#ubuntu装python3&quot; class=&quot;headerlink&quot; title=&quot;ubuntu装python3&quot;&gt;&lt;/a&gt;ubuntu装python3&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install python3&lt;span class=&quot;number&quot;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改默认python版本：&lt;br&gt;打开该用户的 ~/.bashrc文件，添加新的别名信息来修改默认使用的 Python 版本。  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alias python=&lt;span class=&quot;string&quot;&gt;&#39;/usr/bin/python3.6&#39;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;. ~/.bashrc  &lt;span class=&quot;comment&quot;&gt;#生效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;安装pytest-amp-allure&quot;&gt;&lt;a href=&quot;#安装pytest-amp-allure&quot; class=&quot;headerlink&quot; title=&quot;安装pytest&amp;amp;allure&quot;&gt;&lt;/a&gt;安装pytest&amp;amp;allure&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip3 install pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip3 install pytest-allure-adaptor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install -g allure-commandline --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;配置PYTHONPATH环境变量&quot;&gt;&lt;a href=&quot;#配置PYTHONPATH环境变量&quot; class=&quot;headerlink&quot; title=&quot;配置PYTHONPATH环境变量&quot;&gt;&lt;/a&gt;配置PYTHONPATH环境变量&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础命令</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2018/09/11/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2018/09/11/Linux基础命令/</id>
    <published>2018-09-11T15:35:59.000Z</published>
    <updated>2019-12-12T07:29:57.268Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><ol><li>ctrl+shirt+（+）增大终端大小  </li><li>ctrl+（—）减小终端大小</li><li>ls当前路径所有文件  </li><li>–help 使用帮助文档例如：ls –help  </li><li>tab自动补全，两次tab显示全部可以不全内容</li><li>touch+文件名，新增文件，cat+文件名，显示文件内容</li><li>history 查看命令的历史记录<a id="more"></a></li><li>! history(编号) 执行历史命令</li><li>rm  +文件名，删除该文件 -r（删除文件夹）</li><li>mkdir +文件夹名，创建文件夹  -p创建依赖的文件夹</li><li>通配符 例如ls 2*（多位） ？通配一位 ，[]通配里面的内容（一位）</li><li>‘&gt;’重定向，‘&gt;&gt;’追加</li><li>more 可以分屏显示文件内容 （b&amp;f上下页）‘|’more组合使用其他命令</li><li>clear 清屏</li><li>cd 打开文件夹 ./当前路径,..上个路径。组合使用../..  /绝对路径 -回到上个路径</li><li>pwd 显示绝对路径</li><li>tree 目录树 </li><li>mv 重命名 mv 原文件名 新文件名</li><li>grep -n “搜索条件” 文件名 </li><li>mv 文件名 文件夹名 移动文件</li><li>cp 文件 文件夹名 复制文件   -r 复制文件夹下的所有文件</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;ctrl+shirt+（+）增大终端大小  &lt;/li&gt;
&lt;li&gt;ctrl+（—）减小终端大小&lt;/li&gt;
&lt;li&gt;ls当前路径所有文件  &lt;/li&gt;
&lt;li&gt;–help 使用帮助文档例如：ls –help  &lt;/li&gt;
&lt;li&gt;tab自动补全，两次tab显示全部可以不全内容&lt;/li&gt;
&lt;li&gt;touch+文件名，新增文件，cat+文件名，显示文件内容&lt;/li&gt;
&lt;li&gt;history 查看命令的历史记录&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>appium(android)环境搭建</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2018/09/05/appium-android-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2018/09/05/appium-android-环境搭建/</id>
    <published>2018-09-05T07:16:32.000Z</published>
    <updated>2018-09-05T13:14:27.034Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h4><p>1、右击计算机-属性-高级系统设置-高级-环境变量-系统变量-新建：<br>变量名：JAVA_HOME<br>变量值：C:\Program Files\Java\jdk1.8.0_91</p><p>2、系统变量→寻找 Path 变量→编辑<br>在变量值最后输入 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;  （注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的代码）</p><p>3、系统变量→新建 CLASSPATH 变量<br>变量值填写   .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar（注意最前面有一点）</p><p>4、检验是否配置成功 运行cmd 输入 java -version （java 和 -version 之间有空格）<br>显示版本信息 java(TM) SE Runtime Environment …. 则说明安装和配置成功。  </p><hr><a id="more"></a><h4 id="安装androidstudio"><a href="#安装androidstudio" class="headerlink" title="安装androidstudio"></a>安装androidstudio</h4><p>1、新增系统变量<br>变量名：ANDROID_HOME<br>变量值：C:\android_sdk（改成对应的路径即可）</p><p>2、在path中添加：</p><p>%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools;  </p><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>管网下载后直接安装，会自动加入到环境变量中<br>使用npm命令可以验证是否安装成功  </p><h4 id="安装appium"><a href="#安装appium" class="headerlink" title="安装appium"></a>安装appium</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g appium</span><br></pre></td></tr></table></figure><p>或者直接在官网下载桌面端</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装jdk&quot;&gt;&lt;a href=&quot;#安装jdk&quot; class=&quot;headerlink&quot; title=&quot;安装jdk&quot;&gt;&lt;/a&gt;安装jdk&lt;/h4&gt;&lt;p&gt;1、右击计算机-属性-高级系统设置-高级-环境变量-系统变量-新建：&lt;br&gt;变量名：JAVA_HOME&lt;br&gt;变量值：C:\Program Files\Java\jdk1.8.0_91&lt;/p&gt;
&lt;p&gt;2、系统变量→寻找 Path 变量→编辑&lt;br&gt;在变量值最后输入 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;  （注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的代码）&lt;/p&gt;
&lt;p&gt;3、系统变量→新建 CLASSPATH 变量&lt;br&gt;变量值填写   .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar（注意最前面有一点）&lt;/p&gt;
&lt;p&gt;4、检验是否配置成功 运行cmd 输入 java -version （java 和 -version 之间有空格）&lt;br&gt;显示版本信息 java(TM) SE Runtime Environment …. 则说明安装和配置成功。  &lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>python入门笔记04</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2018/08/06/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B004/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2018/08/06/python入门笔记04/</id>
    <published>2018-08-06T03:26:58.000Z</published>
    <updated>2018-08-06T03:40:48.051Z</updated>
    
    <content type="html"><![CDATA[<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while 判断语句:<br>    语句</p><p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">100</span></span><br><span class="line"> </span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> counter &lt;= n:<span class="comment">#条件为false是跳出</span></span><br><span class="line">    sum = sum + counter</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"1 到 %d 之和为: %d"</span> % (n,sum))</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>写一个无限循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> var == <span class="number">1</span> :  <span class="comment"># 表达式永远为 true</span></span><br><span class="line">   print(<span class="string">'梦妍大佬你好！'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Good bye!"</span>)</span><br></pre></td></tr></table></figure></p><h4 id="while-amp-else"><a href="#while-amp-else" class="headerlink" title="while &amp; else"></a>while &amp; else</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="keyword">print</span> (count, <span class="string">" 小于 5"</span>)</span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (count, <span class="string">" 大于或等于 5"</span>)</span><br></pre></td></tr></table></figure><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><p>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure></p><p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tester = [<span class="string">'myl'</span>, <span class="string">'lnc'</span>, <span class="string">'xg'</span>, <span class="string">'zzl'</span>, <span class="string">'qfl'</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tester:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure></p><p>使用break跳出循环<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tester = [<span class="string">'myl'</span>, <span class="string">'lnc'</span>, <span class="string">'xg'</span>, <span class="string">'zzl'</span>, <span class="string">'qfl'</span>]</span><br><span class="line">list = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> tester:</span><br><span class="line">    list.append(name)</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'xg'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'员工列表为空'</span>)</span><br><span class="line">print(<span class="string">'the old tester:'</span>,list)</span><br><span class="line">print(<span class="string">'完成循环'</span>)</span><br></pre></td></tr></table></figure></p><p>循环到zzl之后就跳出循环</p><h4 id="break和continue语句及循环中的else子句"><a href="#break和continue语句及循环中的else子句" class="headerlink" title="break和continue语句及循环中的else子句"></a>break和continue语句及循环中的else子句</h4><p>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。 实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">tester = [<span class="string">'myl'</span>, <span class="string">'lnc'</span>, <span class="string">'xg'</span>, <span class="string">'qfl'</span>, <span class="string">'zzl'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> tester:</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'myl'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">'大佬为：'</span>,name)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">tester = [<span class="string">'myl'</span>, <span class="string">'lnc'</span>, <span class="string">'xg'</span>, <span class="string">'qfl'</span>, <span class="string">'zzl'</span>]</span><br><span class="line">t = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> t &lt; len(tester):</span><br><span class="line">    print(t)</span><br><span class="line">    <span class="keyword">if</span> tester[t] == <span class="string">'lnc'</span>:</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'大佬为'</span>,tester[t])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    t = t + <span class="number">1</span></span><br><span class="line">print(<span class="string">'bye'</span>)</span><br></pre></td></tr></table></figure><p>continue语句被用来告诉Python跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tester = [<span class="string">'myl'</span>, <span class="string">'lnc'</span>, <span class="string">'xg'</span>, <span class="string">'zzl'</span>, <span class="string">'qfl'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> tester:</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'qfl'</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(<span class="string">'tester中的大佬为：'</span>,name)</span><br></pre></td></tr></table></figure><h4 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h4><p>Python pass是空语句，是为了保持程序结构的完整性。</p><p>pass 不做任何事情，一般用做占位语句，如下实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Runoob'</span>: </span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'o'</span>:</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">      <span class="keyword">print</span> (<span class="string">'执行 pass 块'</span>)</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">'当前字母 :'</span>, letter)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Good bye!"</span>)</span><br></pre></td></tr></table></figure></p><h4 id="Pyhon3-函数"><a href="#Pyhon3-函数" class="headerlink" title="Pyhon3 函数"></a>Pyhon3 函数</h4><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p><p>函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。</p><h4 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h4><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名（参数列表）：</span></span><br><span class="line"><span class="function">    函数体</span></span><br></pre></td></tr></table></figure><p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Hello World'</span>)</span><br></pre></td></tr></table></figure></p><p>复杂点的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cha</span><span class="params">(w, h)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> w- h</span><br><span class="line">l, f =<span class="number">4</span>, <span class="number">5</span></span><br><span class="line">print(cha(w,h))<span class="comment">#按顺序</span></span><br><span class="line">print(cha(h=<span class="number">5</span>,w=<span class="number">4</span>))<span class="comment">#指定</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span><span class="params">( name, age = <span class="number">35</span> )</span>:</span></span><br><span class="line">   <span class="string">"打印任何传入的字符串"</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"名字: "</span>, name)</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"年龄: "</span>, age)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo( age=<span class="number">24</span>, name=<span class="string">"lqf"</span> )</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"------------------------"</span>)</span><br><span class="line"><span class="comment">#不传age，则使用定义时的默认值35</span></span><br><span class="line">printinfo( name=<span class="string">"lqf"</span> )</span><br></pre></td></tr></table></figure><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><p>加了星号（*）的变量名会存放所有未命名的变量参数。如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。如下实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span><span class="params">( arg1, *vartuple )</span>:</span></span><br><span class="line">   <span class="string">"打印任何传入的参数"</span></span><br><span class="line">  </span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"输出:,"</span>arg1)</span><br><span class="line">   <span class="keyword">for</span> var <span class="keyword">in</span> vartuple:</span><br><span class="line">      <span class="keyword">print</span> (var)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo( <span class="number">10</span> )</span><br><span class="line">printinfo( <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span> )</span><br></pre></td></tr></table></figure></p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">0</span> <span class="comment"># 这是一个全局变量</span></span><br><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">( arg1, arg2 )</span>:</span></span><br><span class="line">    <span class="comment">#返回2个参数的和."</span></span><br><span class="line">    total = arg1 + arg2 <span class="comment"># total在这里是局部变量.</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"函数内是局部变量 : "</span>, total)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用sum函数</span></span><br><span class="line">sum( <span class="number">10</span>, <span class="number">20</span> )</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"函数外是全局变量 : "</span>, total)</span><br></pre></td></tr></table></figure><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>在python中，所有数据类型都可以视为对象，当然也可以自定义对象，自定义对象数据类型就是面向对象中的类（class）的概念；<br>student（有name，score）这种数据类型应该被视为一个对象，这个对象拥有name和score这两个属性，如果要打印一个学生的成绩，首先要创建出这个学生对应的对象，然后给对象发一个print_score消息，让对象自己把自己的数据打印出来。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (self.name,self.score))</span><br><span class="line"></span><br><span class="line">lqf = Student(<span class="string">'luoqingfu'</span>,<span class="number">59</span>)</span><br><span class="line">lqf.print_score()</span><br></pre></td></tr></table></figure></p><h4 id="类（Class）和实例"><a href="#类（Class）和实例" class="headerlink" title="类（Class）和实例"></a>类（Class）和实例</h4><p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p><p>仍以Student类为例，在Python中，定义类是通过<strong>class</strong>关键字：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用object类，这是所有类最终都会继承的类。<br>定义好了Student类，就可以根据Student类创建出Student的实例，创建实例是通过类名+()实现的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lqf = Student()</span><br></pre></td></tr></table></figure></p><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<strong>init</strong>方法，在创建实例的时候，就把name，score等属性绑上去：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure></p><p>注意到<strong>init</strong>方法的第一个参数永远是self，表示创建的实例本身，因此，在<strong>init</strong>方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。  </p><h4 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h4><p>在面向对象的程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。</p><p>比如，我们已经编写了一个名为Animal的class，有一个run()方法可以直接打印：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal is running...'</span>)</span><br></pre></td></tr></table></figure></p><p>当我们需要编写Dog和Cat类是，就可以从animal类中继承<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>对于Dog来说，Animal就是它的父类，对于Animal来说，Dog就是它的子类。Cat和Dog类似。</p><p>继承有什么好处？最大的好处是子类获得了父类的全部功能。由于Animial实现了run()方法，因此，Dog和Cat作为它的子类，什么事也没干，就自动拥有了run()方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dog = Dog()</span><br><span class="line">dog.run()</span><br><span class="line"></span><br><span class="line">cat = Cat()</span><br><span class="line">cat.run()</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br></pre></td></tr></table></figure></p><p>继承的第二个好处需要我们对代码做一点改进。你看到了，无论是Dog还是Cat，它们run()的时候，显示的都是Animal is running…，符合逻辑的做法是分别显示Dog is running…和Cat is running…，因此，对Dog和Cat类改进如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Dog is running...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Cat is running...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">Dog <span class="keyword">is</span> running...</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br></pre></td></tr></table></figure></p><p>当子类和父类都存在相同的run()方法时，我们说，子类的run()覆盖了父类的run()。<br>笔者整理到这，有些例子是参照菜鸟教程的，</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;while循环&quot;&gt;&lt;a href=&quot;#while循环&quot; class=&quot;headerlink&quot; title=&quot;while循环&quot;&gt;&lt;/a&gt;while循环&lt;/h4&gt;&lt;p&gt;while 判断语句:&lt;br&gt;    语句&lt;/p&gt;
&lt;p&gt;实例：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;n = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;counter = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; counter &amp;lt;= n:&lt;span class=&quot;comment&quot;&gt;#条件为false是跳出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum = sum + counter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    counter += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;1 到 %d 之和为: %d&quot;&lt;/span&gt; % (n,sum))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python入门笔记" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python入门笔记03</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2018/08/06/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B003/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2018/08/06/python入门笔记03/</id>
    <published>2018-08-06T03:26:26.000Z</published>
    <updated>2018-08-06T03:36:41.274Z</updated>
    
    <content type="html"><![CDATA[<h4 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h4><p><img src="http://www.runoob.com/wp-content/uploads/2013/11/if-condition.jpg" alt="image"></p><h4 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h4><p>python中if语句的一般形式如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_block_3</span><br></pre></td></tr></table></figure></p><ul><li>如果 “condition_1”为True将执行”statement_block_1” 块语句</li><li>如果 “condition_1” 为False，将判断 “condition_2”</li><li>如果”condition_2” 为 True 将执行 “statement_block_2” 块语句</li><li>如果 “condition_2” 为False，将执行”statement_block_3”块语句<br>实例：<a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">age = int(input(<span class="string">"请输入你家狗的年龄："</span>))</span><br><span class="line">print(<span class="string">" "</span>)</span><br><span class="line"><span class="keyword">if</span> age&lt;<span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'你是在逗我吧'</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'相当与14岁的人'</span>)</span><br><span class="line"><span class="keyword">elif</span> age ==<span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'相当于22岁的人'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;<span class="number">2</span>:</span><br><span class="line">    human = <span class="number">22</span> + (age - <span class="number">2</span>)*<span class="number">5</span></span><br><span class="line">    print(<span class="string">'对应人类的年龄'</span>,human)</span><br></pre></td></tr></table></figure></li></ul><p>运算符：<br>操作符|    描述<br>–|–<br>&lt;|    小于<br>&lt;=|    小于或等于</p><blockquote><p>|    大于<br>=|    大于或等于<br>==|    等于，比较对象是否相等<br>!=|不等于</p></blockquote><h4 id="if嵌套："><a href="#if嵌套：" class="headerlink" title="if嵌套："></a>if嵌套：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = raw_input(<span class="string">'请选择输入一个名字：'</span>)</span><br><span class="line">ceshi = [<span class="string">'myl'</span>, <span class="string">'lnc'</span>, <span class="string">'xg'</span>, <span class="string">'zzl'</span>, <span class="string">'qfl'</span>]</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> ceshi:</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'myl'</span> <span class="keyword">or</span> name ==<span class="string">'lnc'</span>:</span><br><span class="line">        print(<span class="string">'给%s大佬递茶'</span> % name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'%s饮水机在那边'</span> % name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'查无此人'</span>)</span><br></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p><img src="http://www.runoob.com/wp-content/uploads/2014/05/while_loop_1.png" alt="image"><br>结合场景说语句</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;条件控制语句&quot;&gt;&lt;a href=&quot;#条件控制语句&quot; class=&quot;headerlink&quot; title=&quot;条件控制语句&quot;&gt;&lt;/a&gt;条件控制语句&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2013/11/if-condition.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;if判断&quot;&gt;&lt;a href=&quot;#if判断&quot; class=&quot;headerlink&quot; title=&quot;if判断&quot;&gt;&lt;/a&gt;if判断&lt;/h4&gt;&lt;p&gt;python中if语句的一般形式如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; condition_1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statement_block_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; condition_2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statement_block_2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statement_block_3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 “condition_1”为True将执行”statement_block_1” 块语句&lt;/li&gt;
&lt;li&gt;如果 “condition_1” 为False，将判断 “condition_2”&lt;/li&gt;
&lt;li&gt;如果”condition_2” 为 True 将执行 “statement_block_2” 块语句&lt;/li&gt;
&lt;li&gt;如果 “condition_2” 为False，将执行”statement_block_3”块语句&lt;br&gt;实例：&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python入门笔记" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python入门笔记02</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2018/08/06/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B002/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2018/08/06/python入门笔记02/</id>
    <published>2018-08-06T03:25:40.000Z</published>
    <updated>2018-08-06T03:36:42.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python3-基本数据类型"><a href="#Python3-基本数据类型" class="headerlink" title="Python3 基本数据类型"></a>Python3 基本数据类型</h3><p>python中的变量不需要声明。每个变量在使用前都必须赋值，变量被赋值以后才会被创建。在Python中，变量就是变量，它没有类型，我们所说的类型是指内存中对象的类型。<br>等号（=）用来给变量赋值等号左边是一个变量名，右边是变量的值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">100</span></span><br><span class="line">miles = <span class="number">100.0</span></span><br><span class="line">name = <span class="string">"lqf"</span></span><br></pre></td></tr></table></figure></p><h4 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>以上3个变量都指向同一个内存位置<br><a id="more"></a><br>多个对象指定多个变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"lqf"</span></span><br></pre></td></tr></table></figure></p><hr><h4 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h4><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Sets（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中:</p><ul><li><strong>不可变数据（四个）</strong>：Number（数字），String（字符串），Tuple（元组），Set（集合）</li><li><strong>可变数据（两个）</strong>：List（列表），Dictionary（字典）。  </li></ul><hr><h3 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h3><p>python 支持int，float，bool，complex（复数）。<br>在python中，只有一种整数类型int，表示为长整型。<br>使用type（）函数可以查询变量所指的对象类型。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, <span class="keyword">True</span>, <span class="number">4</span>+<span class="number">3j</span></span><br><span class="line">print(type(a), type(b), type(c), type(d))</span><br></pre></td></tr></table></figure></p><hr><h4 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h4><p>Python中的字符串用单引号（’）或者（”）括起来，<br>字符串的截取语法格式：<br>变量[头下标：尾下标]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="string">'Hello World!'</span></span><br><span class="line">var2 = <span class="string">"Runoob"</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"var1[0]: "</span>, var1[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"var2[1:5]: "</span>, var2[<span class="number">1</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure></p><p>执行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1[<span class="number">0</span>]:  H</span><br><span class="line">var2[<span class="number">1</span>:<span class="number">5</span>]:  unoo</span><br></pre></td></tr></table></figure></p><h4 id="python字符串更新"><a href="#python字符串更新" class="headerlink" title="python字符串更新"></a>python字符串更新</h4><p>你可以截取字符串的一部分并与其他字段拼接，如下实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="string">'Hello World!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"已更新字符串 : "</span>, var1[:<span class="number">6</span>] + <span class="string">'Runoob!'</span>)</span><br></pre></td></tr></table></figure></p><p>执行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已更新字符串 :  Hello Runoob!</span><br></pre></td></tr></table></figure></p><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>在需要在字符中使用特殊字符时，python用反斜杠()转义字符。如下表：<br>转义字符 | 描述<br>—|—<br>(在行尾时)    |续行符<br>\    |反斜杠符号<br>\‘ |    单引号<br>\“ |    双引号</p><h4 id="Python字符串运算符号"><a href="#Python字符串运算符号" class="headerlink" title="Python字符串运算符号"></a>Python字符串运算符号</h4><p>下表实例变量a值为字符串 “Hello”，b变量值为 “Python”：</p><table><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>字符串连接</td><td>a + b 输出结果： HelloPython</td></tr><tr><td>*</td><td>重复输出字符串</td><td>a*2 输出结果：HelloHello</td></tr><tr><td>[]</td><td>通过索引获取字符串中字符</td><td>a[1] 输出结果 e</td></tr><tr><td>[ : ]</td><td>截取字符串中的一部分</td><td>a[1:4] 输出结果 ell</td></tr><tr><td>in</td><td>成员运算符 - 如果字符串中包含给定的字符返回 True</td><td>‘H’ in a 输出结果 1</td></tr><tr><td>not in</td><td>成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td>‘M’ not in a 输出结果 1</td></tr><tr><td>r/R</td><td>原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td><td><figure class="highlight plain"><figcaption><span>r'\n' )print( R'\n' )```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">%|格式字符串|请看下一节内容。</span><br><span class="line">```python</span><br><span class="line">a = &quot;Hello&quot;</span><br><span class="line">b = &quot;Python&quot;</span><br><span class="line"> </span><br><span class="line">print(&quot;a + b 输出结果：&quot;, a + b)</span><br><span class="line">print(&quot;a * 2 输出结果：&quot;, a * 2)</span><br><span class="line">print(&quot;a[1] 输出结果：&quot;, a[1])</span><br><span class="line">print(&quot;a[1:4] 输出结果：&quot;, a[1:4])</span><br><span class="line"> </span><br><span class="line">if( &quot;H&quot; in a) :</span><br><span class="line">    print(&quot;H 在变量 a 中&quot;)</span><br><span class="line">else :</span><br><span class="line">    print(&quot;H 不在变量 a 中&quot;)</span><br><span class="line"> </span><br><span class="line">if( &quot;M&quot; not in a) :</span><br><span class="line">    print(&quot;M 不在变量 a 中&quot;)</span><br><span class="line">else :</span><br><span class="line">    print(&quot;M 在变量 a 中&quot;)</span><br><span class="line"> </span><br><span class="line">print (r&apos;\n&apos;)</span><br><span class="line">print (R&apos;\n&apos;)</span><br></pre></td></tr></table></figure></td></tr></tbody></table><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a + b 输出结果： HelloPython</span><br><span class="line">a * <span class="number">2</span> 输出结果： HelloHello</span><br><span class="line">a[<span class="number">1</span>] 输出结果： e</span><br><span class="line">a[<span class="number">1</span>:<span class="number">4</span>] 输出结果： ell</span><br><span class="line">H 在变量 a 中</span><br><span class="line">M 不在变量 a 中</span><br><span class="line">\n</span><br><span class="line">\n</span><br></pre></td></tr></table></figure></p><h4 id="python字符串格式化"><a href="#python字符串格式化" class="headerlink" title="python字符串格式化"></a>python字符串格式化</h4><p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">"我叫 %s 今年 %d 岁!"</span> % (<span class="string">'小明'</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure></p><p>python字符串格式化符号:<br>符号| 描述<br>—|—<br>   %c     |格式化字符及其ASCII码<br>      %s|     格式化字符串<br>      %d|     格式化整数<br>      %u|     格式化无符号整型<br>      %o|     格式化无符号八进制数<br>      %x|     格式化无符号十六进制数<br>      %X|     格式化无符号十六进制数（大写）<br>      %f|     格式化浮点数字，可指定小数点后的精度<br>      %e|     用科学计数法格式化浮点数<br>      %E|     作用同%e，用科学计数法格式化浮点数<br>      %g|     %f和%e的简写<br>      %G|     %f 和 %E 的简写<br>      %p|     用十六进制数格式化变量的地址</p><hr><h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><p>list是python中使用的最频繁的数据类型<br>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号([])之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表截取的语法格式如下：<br>变量[头下标:尾下标]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">'runoob'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (list)            <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line"><span class="keyword">print</span> (list[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 输出两次列表</span></span><br><span class="line"><span class="keyword">print</span> (list + tinylist) <span class="comment"># 连接列表</span></span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span>]</span><br><span class="line">abcd</span><br><span class="line">[<span class="number">786</span>, <span class="number">2.23</span>]</span><br><span class="line">[<span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span>]</span><br><span class="line">[<span class="number">123</span>, <span class="string">'runoob'</span>, <span class="number">123</span>, <span class="string">'runoob'</span>]</span><br><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">'runoob'</span>]</span><br></pre></td></tr></table></figure></p><p>与Python字符串不一样的是，列表中的元素是可以改变的：<br>实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>] = []   <span class="comment"># 将对应的元素值设置为 [] </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></p><h4 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h4><p>可以使用del语句来删除列表的元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (list)</span><br><span class="line"><span class="keyword">del</span> list[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"删除第三个元素 : "</span>, list)</span><br></pre></td></tr></table></figure></p><h4 id="python列表操作符"><a href="#python列表操作符" class="headerlink" title="python列表操作符"></a>python列表操作符</h4><table><thead><tr><th>python表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>len([1, 2, 3])</td><td>3</td><td>长度</td></tr><tr><td>[1, 2, 3] + [4, 5, 6]</td><td>[1, 2, 3, 4, 5, 6]</td><td>组合</td></tr><tr><td>[‘Hi!’] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td></tr><tr><td>3 in [1, 2, 3]</td><td>True</td><td>元素是否存在于列表中</td></tr><tr><td>for x in [1, 2, 3]: print(x, end=” “)</td><td>1 2 3</td><td>迭代</td></tr></tbody></table><h4 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [a, n]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">'b'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.append()</span><br><span class="line">list.count() <span class="comment">#返回元素在列表中出现的次数</span></span><br><span class="line">list.pop()</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>1、List写在方括号之间，元素用逗号隔开。</li><li>2、和字符串一样，list可以被索引和切片。</li><li>3、List可以使用+操作符进行拼接。</li><li>4、List中的元素是可以改变的。</li></ul><hr><h4 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h4><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。</p><p>元组中的元素类型也可以不相同：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tuple = ( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">'runoob'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (tuple)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="keyword">print</span> (tuple + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'abcd'</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span>)</span><br><span class="line">abcd</span><br><span class="line">(<span class="number">786</span>, <span class="number">2.23</span>)</span><br><span class="line">(<span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span>)</span><br><span class="line">(<span class="number">123</span>, <span class="string">'runoob'</span>, <span class="number">123</span>, <span class="string">'runoob'</span>)</span><br><span class="line">(<span class="string">'abcd'</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">'runoob'</span>)</span><br></pre></td></tr></table></figure></p><p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。</p><p>其实，可以把字符串看作一种特殊的元组。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup[<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup[<span class="number">0</span>] = <span class="number">11</span>  <span class="comment"># 修改元组元素的操作是非法的</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(tup1)     <span class="comment"># 不加逗号，类型为整型</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; tup1 = (50,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(tup1)     <span class="comment"># 加上逗号，类型为元组</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a>修改元组</h4><p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">tup1 = (<span class="number">12</span>, <span class="number">34.56</span>);</span><br><span class="line">tup2 = (<span class="string">'abc'</span>, <span class="string">'xyz'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下修改元组元素操作是非法的。</span></span><br><span class="line"><span class="comment"># tup1[0] = 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的元组</span></span><br><span class="line">tup3 = tup1 + tup2;</span><br><span class="line"><span class="keyword">print</span> (tup3)</span><br><span class="line"></span><br><span class="line">(<span class="number">12</span>, <span class="number">34.56</span>, <span class="string">'abc'</span>, <span class="string">'xyz'</span>)</span><br></pre></td></tr></table></figure></p><h4 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">up = (<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (tup)</span><br><span class="line"><span class="keyword">del</span> tup;</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"删除后的元组 tup : "</span>)</span><br><span class="line"><span class="keyword">print</span> (tup)</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">删除后的元组 tup : </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> (tup)</span><br><span class="line">NameError: name <span class="string">'tup'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><h4 id="元组运算符"><a href="#元组运算符" class="headerlink" title="元组运算符"></a>元组运算符</h4><p>与字符串一样，元组之间可以使用 + 号和 <em> 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组<br>python表达式|结果|描述<br>—|—|—<br>len((1, 2, 3))    |3|    计算元素个数<br>(1, 2, 3) + (4, 5, 6)|    (1, 2, 3, 4, 5, 6)    |连接<br>(‘Hi!’,) </em> 4|    (‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)|    复制<br>3 in (1, 2, 3)|    True    |元素是否存在<br>for x in (1, 2, 3): print (x,)    |1 2 3    |迭代</p><h4 id="元素索引，截取"><a href="#元素索引，截取" class="headerlink" title="元素索引，截取"></a>元素索引，截取</h4><p>因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下所示：<br>元组：L = (‘Google’, ‘Taobao’, ‘Runoob’)</p><table><thead><tr><th>Python表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>L[2]</td><td>‘Runoob’</td><td>读取第三个元素</td></tr><tr><td>L[-2]</td><td>‘Taobao’</td><td>反向读取；读取倒数第二个元素</td></tr><tr><td>L[1:]</td><td>(‘Taobao’, ‘Runoob’)</td><td>截取元素，从第二个开始后的所有元素。</td></tr></tbody></table><h4 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a>元组内置函数</h4><p>len()<br>max()<br>min()<br>tuple()#将列表转化为元组</p><hr><h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h4><p>集合（set）是一个无序不重复元素的序列。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p><p>创建格式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line">或者</span><br><span class="line">set(value)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;<span class="string">'Tom'</span>, <span class="string">'Jim'</span>, <span class="string">'Mary'</span>, <span class="string">'Tom'</span>, <span class="string">'Jack'</span>, <span class="string">'Rose'</span>&#125;</span><br><span class="line"> </span><br><span class="line">print(student)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'Rose'</span> <span class="keyword">in</span> student) :</span><br><span class="line">    print(<span class="string">'Rose 在集合中'</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">'Rose 不在集合中'</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line"> </span><br><span class="line">print(a)</span><br><span class="line"> </span><br><span class="line">print(a - b)     <span class="comment"># a和b的差集</span></span><br><span class="line"> </span><br><span class="line">print(a | b)     <span class="comment"># a和b的并集</span></span><br><span class="line"> </span><br><span class="line">print(a &amp; b)     <span class="comment"># a和b的交集</span></span><br><span class="line"> </span><br><span class="line">print(a ^ b)     <span class="comment"># a和b中不同时存在的元素</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'Mary'</span>, <span class="string">'Jim'</span>, <span class="string">'Rose'</span>, <span class="string">'Jack'</span>, <span class="string">'Tom'</span>&#125;</span><br><span class="line">Rose 在集合中</span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line">&#123;<span class="string">'l'</span>, <span class="string">'r'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'z'</span>, <span class="string">'m'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">&#123;<span class="string">'l'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>, <span class="string">'m'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用”{ }”标识，它是一个无序的键(key) : 值(value)对集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'one'</span>] = <span class="string">"1 - 菜鸟教程"</span></span><br><span class="line">dict[<span class="number">2</span>]     = <span class="string">"2 - 菜鸟工具"</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'runoob'</span>,<span class="string">'code'</span>:<span class="number">1</span>, <span class="string">'site'</span>: <span class="string">'www.runoob.com'</span>&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (dict[<span class="string">'one'</span>])       <span class="comment"># 输出键为 'one' 的值</span></span><br><span class="line"><span class="keyword">print</span> (dict[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="keyword">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="keyword">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="keyword">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> - 菜鸟教程</span><br><span class="line"><span class="number">2</span> - 菜鸟工具</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'runoob'</span>, <span class="string">'site'</span>: <span class="string">'www.runoob.com'</span>, <span class="string">'code'</span>: <span class="number">1</span>&#125;</span><br><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'site'</span>, <span class="string">'code'</span>])</span><br><span class="line">dict_values([<span class="string">'runoob'</span>, <span class="string">'www.runoob.com'</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><p>构造函数 dict() 可以直接从键值对序列中构建字典如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;dict([(<span class="string">'Runoob'</span>, <span class="number">1</span>), (<span class="string">'Google'</span>, <span class="number">2</span>), (<span class="string">'Taobao'</span>, <span class="number">3</span>)])</span><br><span class="line">&#123;<span class="string">'Taobao'</span>: <span class="number">3</span>, <span class="string">'Runoob'</span>: <span class="number">1</span>, <span class="string">'Google'</span>: <span class="number">2</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">'Taobao'</span>: <span class="number">3</span>, <span class="string">'Runoob'</span>: <span class="number">1</span>, <span class="string">'Google'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></p><h4 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"></span><br><span class="line">dict[<span class="string">'Age'</span>] = <span class="number">8</span>;               <span class="comment"># 更新 Age</span></span><br><span class="line">dict[<span class="string">'School'</span>] = <span class="string">"菜鸟教程"</span>  <span class="comment"># 添加信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>])</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict[<span class="string">'Age'</span>]:  <span class="number">8</span></span><br><span class="line">dict[<span class="string">'School'</span>]:  菜鸟教程</span><br></pre></td></tr></table></figure></p><h4 id="删除字典元素"><a href="#删除字典元素" class="headerlink" title="删除字典元素"></a>删除字典元素</h4><p>能删单一的元素也能清空字典，清空只需一项操作。<br>显示删除一个字典用del命令，如下实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> dict[<span class="string">'Name'</span>] <span class="comment"># 删除键 'Name'</span></span><br><span class="line">dict.clear()     <span class="comment"># 清空字典</span></span><br><span class="line"><span class="keyword">del</span> dict         <span class="comment"># 删除字典</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['School']: "</span>, dict[<span class="string">'School'</span>])</span><br></pre></td></tr></table></figure></p><h4 id="字典键的特性"><a href="#字典键的特性" class="headerlink" title="字典键的特性"></a>字典键的特性</h4><p>字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。</p><p>两个重要的点需要记住：</p><p>1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Name'</span>: <span class="string">'小菜鸟'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>])</span><br><span class="line">输出</span><br><span class="line">dict[<span class="string">'Name'</span>]:  小菜鸟</span><br></pre></td></tr></table></figure></p><p>2）键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行，如下实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dict = &#123;[<span class="string">'Name'</span>]: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>])</span><br></pre></td></tr></table></figure></p><h4 id="字典内置函数-amp-方法"><a href="#字典内置函数-amp-方法" class="headerlink" title="字典内置函数&amp;方法"></a>字典内置函数&amp;方法</h4><p>len(dict) 计算字典元素个数，即键的总数。    </p><p>str(dict) 输出字典，以可打印的字符串表示。<br>type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。    </p><p><strong>注意</strong></p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用 { }。</li></ul><hr><h4 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h4><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Python3-基本数据类型&quot;&gt;&lt;a href=&quot;#Python3-基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;Python3 基本数据类型&quot;&gt;&lt;/a&gt;Python3 基本数据类型&lt;/h3&gt;&lt;p&gt;python中的变量不需要声明。每个变量在使用前都必须赋值，变量被赋值以后才会被创建。在Python中，变量就是变量，它没有类型，我们所说的类型是指内存中对象的类型。&lt;br&gt;等号（=）用来给变量赋值等号左边是一个变量名，右边是变量的值。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;counter = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;miles = &lt;span class=&quot;number&quot;&gt;100.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name = &lt;span class=&quot;string&quot;&gt;&quot;lqf&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;多个变量赋值&quot;&gt;&lt;a href=&quot;#多个变量赋值&quot; class=&quot;headerlink&quot; title=&quot;多个变量赋值&quot;&gt;&lt;/a&gt;多个变量赋值&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = b = c = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上3个变量都指向同一个内存位置&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python入门笔记" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python入门笔记01</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2018/08/06/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B001/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2018/08/06/python入门笔记01/</id>
    <published>2018-08-06T03:23:40.000Z</published>
    <updated>2018-08-06T03:36:44.007Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一行代码："><a href="#第一行代码：" class="headerlink" title="第一行代码："></a>第一行代码：<br></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span>（<span class="string">"Hello,World!"</span>）</span><br><span class="line">``` </span><br><span class="line">默认情况，python3以UTF<span class="number">-8</span>编码，所有的字符串都是unicode字符串</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">#### python保留字：</span></span><br><span class="line">保留字就是关键字，我们不能使用，查看关键字：</span><br><span class="line">```python</span><br><span class="line">&gt;&gt;<span class="keyword">import</span> keyword</span><br><span class="line">&gt;&gt;keyword.kwlist</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><p>单行注释以#开头：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我是第一个注释  </span></span><br><span class="line">print(<span class="string">"Hello,python!"</span>)<span class="comment">#我是第二个注释</span></span><br></pre></td></tr></table></figure></p><p>多行注释可以用多个#号，还有’’’和”””:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一个注释  </span></span><br><span class="line"><span class="comment">#第二个注释  </span></span><br><span class="line"><span class="string">'''  </span></span><br><span class="line"><span class="string">第三个注释  </span></span><br><span class="line"><span class="string">第四个注释  </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line"><span class="string">"""  </span></span><br><span class="line"><span class="string">第五个注释  </span></span><br><span class="line"><span class="string">第六个注释  </span></span><br><span class="line"><span class="string">"""</span>  </span><br><span class="line">print(<span class="string">"Hello,Pythons!"</span>)</span><br></pre></td></tr></table></figure></p><hr><h4 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h4><p>python最具特色的就是使用缩进来表示代码块不需要使用{}。<br>缩进的空格数是可以变的，但是同一个代码块的语句必须包含相同的缩进空格数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">2</span>&gt;<span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"False"</span>)</span><br></pre></td></tr></table></figure></p><p>以下代码最后一行语句缩进数的空格不一致，会导致运行错误：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">2</span>&gt;<span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     print(<span class="string">"False"</span>)<span class="comment">#缩进不一致，会导致运行错误</span></span><br></pre></td></tr></table></figure></p><p>会导致的错误可以自己尝试以下</p><hr><h4 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h4><p>Python通常是一行写完一条语句，但是如果语句很长我们可以使用反斜杠（\）来实现多行语句<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">item_one = <span class="number">1</span></span><br><span class="line">item_two = <span class="number">2</span></span><br><span class="line">item_three = <span class="number">3</span></span><br><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br><span class="line">print(total)</span><br><span class="line">```  </span><br><span class="line">在[],&#123;&#125;,()中的多行语句，不需要用反斜杠（\）例如:  </span><br><span class="line">```python</span><br><span class="line">total = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>,</span><br><span class="line">        <span class="string">'four'</span>, <span class="string">'five'</span>]</span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure></p><hr><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><p>python中有四种数字类型：整数，布尔型，浮点数和复数  </p><ul><li><strong>int</strong>(整数)，如1，只有一种整数类型int，表示为长整型，没有long  </li><li><strong>bool</strong>（布尔），如True。</li><li><strong>float</strong>（浮点型），如1.23。</li><li><strong>complex</strong>（复数），如 1 + 2j、 1.1 + 2.2j  </li></ul><hr><h4 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h4><ul><li>python中单引号和双引号使用完全相同</li><li>使用三引号（’’’或”””）可以指定一个多行字符串</li><li>转义符\</li><li>反斜杠可以用来转义，使用r可以让反斜杠不发生转义，如r”this is a line \n” 会显示\n而不是换行</li><li>字符串可以用+运算符链接在一起</li><li>Python中的字符串有两种索引方式，从左往右是以0开始，从右往左以-1开始</li><li>字符串的截取的语法方法如下：变量[头下标：尾下标]<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'lqf'</span></span><br><span class="line">print(str) <span class="comment">#输出字符串</span></span><br><span class="line">print(str[<span class="number">0</span>:<span class="number">-1</span>])</span><br><span class="line">print(str[<span class="number">2</span>:])<span class="comment">#输出从第三个开始后的所有字符</span></span><br><span class="line">print(str + <span class="string">'你好'</span>)<span class="comment">#链接字符串</span></span><br><span class="line">print(<span class="string">'hello\nlqf'</span>)<span class="comment">#转义</span></span><br><span class="line">print(<span class="string">r'hello\nlqf'</span>)<span class="comment">#不发生转义</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="import与from…import"><a href="#import与from…import" class="headerlink" title="import与from…import"></a>import与from…import</h4><p>在 python 用 <strong>import</strong> 或者 <strong>from…import</strong> 来导入相应的模块。<br>将整个模块(somemodule)导入，格式为:<strong>import somemodule</strong><br>从某个模块中导入某个函数,格式为： <strong>from somemodule import somefunction</strong><br>从某个模块中导入多个函数,格式为： <strong>from somemodule import firstfunc,   secondfunc, thirdfunc</strong><br>将某个模块中的全部函数导入，格式为: <strong>fromsomemodule import*&nbsp;</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一行代码：&quot;&gt;&lt;a href=&quot;#第一行代码：&quot; class=&quot;headerlink&quot; title=&quot;第一行代码：&quot;&gt;&lt;/a&gt;第一行代码：&lt;br&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;（&lt;span class=&quot;string&quot;&gt;&quot;Hello,World!&quot;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;默认情况，python3以UTF&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt;编码，所有的字符串都是unicode字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#### python保留字：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;保留字就是关键字，我们不能使用，查看关键字：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; keyword&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;keyword.kwlist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python入门笔记" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>自动化平台测试开发笔记（1）</title>
    <link href="https://github.com/luoqingfu/luoqingfu.github.io/2018/08/04/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B9%B3%E5%8F%B0%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <id>https://github.com/luoqingfu/luoqingfu.github.io/2018/08/04/自动化平台测试开发笔记（1）/</id>
    <published>2018-08-04T11:48:27.000Z</published>
    <updated>2018-08-06T03:36:45.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="django"><a href="#django" class="headerlink" title="django"></a>django</h3><p>查看django版本<br>import django<br>django.get_version()  </p><h3 id="创建一个Django项目"><a href="#创建一个Django项目" class="headerlink" title="创建一个Django项目"></a>创建一个Django项目</h3><p>django-admin startproject 工程名  </p><h4 id="迁移数据"><a href="#迁移数据" class="headerlink" title="迁移数据"></a>迁移数据</h4><p>python manage.py migrate</p><h4 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h4><p>python manage.py createsuperuser<br>用户名为：admin<br>邮箱：<a href="mailto:746832476@qq.com" target="_blank" rel="noopener">746832476@qq.com</a><br>密码：123456</p><h4 id="创建apitest项目"><a href="#创建apitest项目" class="headerlink" title="创建apitest项目"></a>创建apitest项目</h4><p>python manage.py startapp apitest  </p><ul><li>创建视图</li><li>创建映射</li><li>创建templates文件夹</li><li>创建login.html</li><li>写入映射</li><li></li></ul><hr><p> mac系统 MySQL 8.0.11版本，安装成功，使用Navicat连接失败</p><p>MySQL安装成功之后，使用navicat连接失败，报错如下：</p><p>　　</p><p>2059 - Authentication plugin ‘caching_sha2_password’ cannot be loaded: dlopen(../Frameworks/caching_sha2_password.so, 2): image not found</p> <a id="more"></a><p>大概意思就是无法加载身份验证插件’caching_sha2_password”<br>解决</p><pre><code>打开系统偏好设置，找到mysql，点击Initialize Database。输入你的密码。选择‘Use legacy password‘。重启mysql服务。现在可以使用Navicat链接小插曲：来源https://www.cnblogs.com/Jiangchuanwei/p/9000939.html</code></pre><hr><p>修改mysql端口：<br>安装好MySQL后通过<br>mysql&gt; show global variables like ‘port’;</p><p>+—————+——-+</p><p>| Variable_name | Value |</p><p>+—————+——-+</p><p>| port          |   0   |</p><p>+—————+——-+</p><p>查看端口后发现端口为0，</p><p>查看/Library/LaunchDaemons下的com.oracle.oss.mysql.mysqld.plist发现根本就没有Port相关的配置</p><p>第一步、停止MySQL服务</p><p>第二部、在com.oracle.oss.mysql.mysqld.plist文件中的ProgramArguments下添加<string>–port=3306</string>保存退出</p><p>重启MySQL数据库，再次查看MySQL端口</p><p>+—————+——-+</p><p>| Variable_name | Value |</p><p>+—————+——-+</p><p>| port          | 3306  |</p><p>+—————+——-+</p><p>在终端下端口显示正确了，打开navicat，连接成功。<br>来源：<a href="https://blog.csdn.net/lixingqiao01/article/details/50956849" target="_blank" rel="noopener">https://blog.csdn.net/lixingqiao01/article/details/50956849</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;django&quot;&gt;&lt;a href=&quot;#django&quot; class=&quot;headerlink&quot; title=&quot;django&quot;&gt;&lt;/a&gt;django&lt;/h3&gt;&lt;p&gt;查看django版本&lt;br&gt;import django&lt;br&gt;django.get_version()  &lt;/p&gt;
&lt;h3 id=&quot;创建一个Django项目&quot;&gt;&lt;a href=&quot;#创建一个Django项目&quot; class=&quot;headerlink&quot; title=&quot;创建一个Django项目&quot;&gt;&lt;/a&gt;创建一个Django项目&lt;/h3&gt;&lt;p&gt;django-admin startproject 工程名  &lt;/p&gt;
&lt;h4 id=&quot;迁移数据&quot;&gt;&lt;a href=&quot;#迁移数据&quot; class=&quot;headerlink&quot; title=&quot;迁移数据&quot;&gt;&lt;/a&gt;迁移数据&lt;/h4&gt;&lt;p&gt;python manage.py migrate&lt;/p&gt;
&lt;h4 id=&quot;创建超级用户&quot;&gt;&lt;a href=&quot;#创建超级用户&quot; class=&quot;headerlink&quot; title=&quot;创建超级用户&quot;&gt;&lt;/a&gt;创建超级用户&lt;/h4&gt;&lt;p&gt;python manage.py createsuperuser&lt;br&gt;用户名为：admin&lt;br&gt;邮箱：&lt;a href=&quot;mailto:746832476@qq.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;746832476@qq.com&lt;/a&gt;&lt;br&gt;密码：123456&lt;/p&gt;
&lt;h4 id=&quot;创建apitest项目&quot;&gt;&lt;a href=&quot;#创建apitest项目&quot; class=&quot;headerlink&quot; title=&quot;创建apitest项目&quot;&gt;&lt;/a&gt;创建apitest项目&lt;/h4&gt;&lt;p&gt;python manage.py startapp apitest  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建视图&lt;/li&gt;
&lt;li&gt;创建映射&lt;/li&gt;
&lt;li&gt;创建templates文件夹&lt;/li&gt;
&lt;li&gt;创建login.html&lt;/li&gt;
&lt;li&gt;写入映射&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt; mac系统 MySQL 8.0.11版本，安装成功，使用Navicat连接失败&lt;/p&gt;
&lt;p&gt;MySQL安装成功之后，使用navicat连接失败，报错如下：&lt;/p&gt;
&lt;p&gt;　　&lt;/p&gt;
&lt;p&gt;2059 - Authentication plugin ‘caching_sha2_password’ cannot be loaded: dlopen(../Frameworks/caching_sha2_password.so, 2): image not found&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/luoqingfu/luoqingfu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
